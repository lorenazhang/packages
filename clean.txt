from transformers import AutoTokenizer, AutoModelForCausalLM
import torch

# Load tokenizer and model
model_name = "meta-llama/Llama-3-70b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(model_name, device_map="auto", torch_dtype=torch.float16)

# Define a function to generate answers
def generate_answer(question):
    # Encode the question
    inputs = tokenizer("Q: " + question + "\nA:", return_tensors="pt").to("cuda")
    # Generate the answer
    output = model.generate(**inputs, max_length=200, temperature=0.7, top_k=50)
    # Decode the generated answer
    answer = tokenizer.decode(output[0], skip_special_tokens=True)
    # Return the answer, cleaned up if necessary
    return answer.split("A:")[-1].strip()

# Sample usage
question = "What are the main benefits of using large language models in AI development?"
answer = generate_answer(question)
print("Answer:", answer)
